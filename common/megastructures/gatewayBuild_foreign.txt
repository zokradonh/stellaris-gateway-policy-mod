# Repair gateway in foreign space
gatewayBuild_gateway_replaced = {
	entity = "gateway_entity"
	construction_entity = "construction_platform_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	build_outside_gravity_well = yes 						# indicates this will use "free" placement between the system's inner and outer ring
															# if this option is active, the placement_rules will be completely ignored
	show_galactic_map_icon = no
	build_time = 1080
	resources = {
		category = megastructures
		cost = {
			alloys = 2500
			energy = 6000
		}
	}
	construction_blocks_others = no
	construction_blocked_by_others = no

	potential = {
		has_technology = tech_gateway_activation
	}

	possible = {
		AND = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "gatewayBuild_requires_foreign_border"
			NOT = {
				is_inside_border = from
			}
		}
		custom_tooltip = { #owner: territory owner from: construction ship owner
			fail_text = "gatewayBuild_requires_inside_border_or_federation_policy"
			OR = {
				#is_inside_border = from
				owner = {
					OR = {
						AND = {
							is_overlord_to = from
							has_policy_flag = "gatewayBuild_permitted"
						}
						AND = {
							is_in_federation_with = from
							federation = {
								has_federation_law = gateway_build_yes
							}
						}
					}
				}
				from = {
					OR = {
						AND = {
							is_galactic_emperor = yes
							is_active_resolution = resolution_zok_gateways_allow_emperor
						}
						AND = {
							OR = {
								is_galactic_emperor = yes
								is_part_of_galactic_council = yes
							}
							is_active_resolution = resolution_zok_gateways_allow_council
						}
						AND = {
							is_galactic_community_member = yes
							is_active_resolution = resolution_zok_gateways_allow_all	
						}
					}
				}
				from = {
					is_overlord_to = prev.owner
				}
				owner.overlord = {
					is_same_empire = from.overlord
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_gateway"
			NOR = {
				has_megastructure = gateway_0
				has_megastructure = gateway_restored
				has_megastructure = gateway_final
				has_megastructure = gatewayBuild_gateway_replaced
				has_megastructure = gatewayBuild_gateway_new
			}
		}
		custom_tooltip = {
			fail_text = "gatewayBuild_requires_ruined_gateway_to_replace"
			has_megastructure = gateway_ruined
		}
	}
	#upgrade_from = {
	#	gateway_0
	#}
	placement_rules = {			# those would be ignored since the gateway is being "free-placed" between the inner and outer radius of the system
	}
	
	# root = system
	# from = country
	ai_weight = {
		factor = 11
		
		modifier = {
			factor = 6
			starbase = { NOT = { has_starbase_size >= starbase_starfortress } }
		}

		modifier = {
			factor = 0
			any_neighbor_system = { 
				OR = {
					has_megastructure = gateway_0
					has_megastructure = gateway_restored
					has_megastructure = gateway_final
				}
			}
		}		
	}

	bypass_type = gateway

	on_build_start = {}
	on_build_cancel = {}	
	on_build_complete = {
		every_system_megastructure = {
			limit = {
				is_megastructure_type = gateway_ruined
			}
			upgrade_megastructure_to = gateway_restored
			finish_upgrade = yes
		}
		every_system_megastructure = {
			limit = {
				is_megastructure_type = gatewayBuild_gateway_replaced
			}
			remove_megastructure = this
		}
		if = {
			limit = { num_active_gateways = 1 }
			random_megastructure = {
				limit = { is_megastructure_type = gateway_ruined }
				upgrade_megastructure_to = gateway_restored
				finish_upgrade = yes
			}
		}
		if = {
			limit = { exists = from } #does not always exist when upgraded from script via "finish_upgrade = yes"
			from = {
				country_event = { id = apoc.12 }
				country_event = { id = apoc.10 }
			}
		}
	}
}

# New gateway in foreign space
gatewayBuild_gateway_new = {
	entity = "gateway_entity"
	construction_entity = "construction_platform_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	build_outside_gravity_well = yes 						# indicates this will use "free" placement between the system's inner and outer ring
															# if this option is active, the placement_rules will be completely ignored
	show_galactic_map_icon = no
	build_time = 2880
	resources = {
		category = megastructures
		cost = {
			alloys = 5000
			energy = 6000
			influence = 100
		}
	}
	construction_blocks_others = no
	construction_blocked_by_others = no

	potential = {
		has_technology = tech_gateway_construction
	}

	possible = {
		AND = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "gatewayBuild_requires_foreign_border"
			NOT = {
				is_inside_border = from
			}
		}
		custom_tooltip = { #owner: territory owner from: construction ship owner
			fail_text = "gatewayBuild_requires_inside_border_or_federation_policy"
			OR = {
				owner = { # allow if territory owner ( is overlord of construction ship owner and if overlord has the special policy set ) or ( is in federation with construction ship owner and the federation has the special law active )
					OR = {
						AND = {
							is_overlord_to = from
							has_policy_flag = "gatewayBuild_permitted"
						}
						AND = {
							is_in_federation_with = from
							federation = {
								has_federation_law = gateway_build_yes
							}
						}
					}
				}
				from = {
					OR = {
						AND = {
							is_galactic_emperor = yes
							is_active_resolution = resolution_zok_gateways_allow_emperor
						}
						AND = {
							OR = {
								is_galactic_emperor = yes
								is_part_of_galactic_council = yes
							}
							is_active_resolution = resolution_zok_gateways_allow_council
						}
						AND = {
							is_galactic_community_member = yes
							is_active_resolution = resolution_zok_gateways_allow_all	
						}
					}
				}
				from = { # allow to build if construction ship is owned by overlord of territory owner
					is_overlord_to = prev.owner
				}
				owner.overlord = { # allow if overlord of construction ship owner is same as overlord of territory owner
					is_same_empire = from.overlord
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_gateway"
			NOR = {
				has_megastructure = gateway_0
				has_megastructure = gateway_restored
				has_megastructure = gateway_final
				has_megastructure = gatewayBuild_gateway_new
				has_megastructure = gateway_ruined
			}
		}
	}
	#upgrade_from = {
	#	gateway_0
	#}
	placement_rules = {			# those would be ignored since the gateway is being "free-placed" between the inner and outer radius of the system
	}
	
	# root = system
	# from = country
	ai_weight = {
		factor = 11
		
		modifier = {
			factor = 6
			starbase = { NOT = { has_starbase_size >= starbase_starfortress } }
		}

		modifier = {
			factor = 0
			any_neighbor_system = { 
				OR = {
					has_megastructure = gateway_0
					has_megastructure = gateway_restored
					has_megastructure = gateway_final
				}
			}
		}		
	}

	bypass_type = gateway

	on_build_start = {}
	on_build_cancel = {}	
	on_build_complete = {
		every_system_megastructure = {
			limit = {
				is_megastructure_type = gatewayBuild_gateway_new
			}
			solar_system = {
				spawn_megastructure = { 
					type = "gateway_final"
					coords_from = prev
					owner = owner
					graphical_culture = fromfrom
				}
			}
			remove_megastructure = this
		}
		if = {
			# Vanilla code. Needed?
			limit = { exists = from } #does not always exist when upgraded from script via "finish_upgrade = yes"
			from = {
				country_event = { id = apoc.13 }
				country_event = { id = apoc.11 }
			}
		}
	}
}
